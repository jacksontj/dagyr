# TODO
    - what to do with invalid return type (how to handle the error)-- abort DAG?
    - better conversion/visualization/editor tools?
        -- convert DAG to embedded view (for reading)
        -- convert DAG to image (with labels etc.)
    - support processing_nodes returning futures (some non-blocking task)
    - Callback API in DAGExecutor to call with state after every dag/step?
        - thinking of the autoremediation case-- some of these steps may take a LONG
            time to complete (hours+), so the state might want to be persisted

        - Need to decide, should this be `Dagyr` wide, or `DagExecutor` wide
        Delegate methods (set in the DagExecutionContext), methods for:
            - start DAG
            - Start Node
            - end node
            - end dag

    - Config
        -- name and info are the same 99% of the time, we should probably make
            info optional and default to "name"

Questions remaining for inlet/outlet refactor:
    - should we require complete arg_spec definition in processing_node_type?
        pros: consistent, don't have to "merge"-- just check compatibility
        cons: duplicated data most of the time :/
    - When processing_functions are called-- should we pass them inlet, outlet, or all?
    - for inlets/outlets-- should they be required always (or default to singles with no restrictions)
        simple simplicity vs. explicit tradeoff
    - processing_node_instance-- the map is currently {return -> (outlet_id, inlet_id, node_id)}
        Should this be a map? is this fine?
