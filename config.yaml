# which DAG for each "hook"
# rename? hook mapping? dag_context? hook_context?
execution_context:
  ingress:
    dag_name: ingress
    options_data: request_control

  egress:
    dag_name: egress
    options_data: request_control

# space for global options (assuming they'll be re-used a lot)
options_data:
  request_control:
    valid_domains:
      - a.com
      - b.com
      - localhost:8888
    valid_paths: ['/foo/bar', '/foo']
    foo:
      type: int
      value: 1234

  # TODO: this won't be used, we should throw a warning/error?
  other_control:
    bar: baz

# what types of processing_nodes -- effectively a template
processing_node_types:
  1:
    name: 'attribute_match'
    info: 'match an attribute against a set of values'
    info_url: http://someplace.com
    # this fragment has the effect of setting a "domain DAG name"
    fragment_func: attribute_match
    # this is what the args are, and potentially how to resolve them (look it up)
    fragment_spec:
      # this is a thing that will be passed a key to lookup the value
      attribute:
        # TODO: is this needed? the key is already there...
        name: 'a readable name'
        info: 'name of the attribute to match'
        type: string
      # this just gets a value-- just use it
      values:
        # TODO: is this needed? the key is already there...
        name: 'a readable name'
        info: 'list of values to match against'
        type: list  # TODO: define type of values?
         # this means that the value you are passed will be a key to lookup in options
        option_data: true
  2:
    name: 'execute_dynamic_dag'
    info: 'execute another dag'
    fragment_func: execute_dynamic_dag
    fragment_spec:
      # this is a thing that will be passed a key to lookup the value
      dag_prefix:
        # TODO: is this needed? the key is already there...
        name: 'a readable name'
        info: 'string prefix'
        type: string
      # this just gets a value-- just use it
      suffix_key:
        # TODO: is this needed? the key is already there...
        name: 'a readable name'
        info: 'list of values to match against'
        type: string
  3:
    name: 'set_attribute'
    info: 'set an attribute'
    fragment_func: set_attribute
    fragment_spec:
      # this is a thing that will be passed a key to lookup the value
      attribute:
        # TODO: is this needed? the key is already there...
        name: 'a readable name'
        info: 'name of the attribute to match'
        type: string
      # this just gets a value-- just use it
      value:
        # TODO: is this needed? the key is already there...
        name: 'what to set it to'
        info: 'what value to set'
        # TODO: any??
        #type: string

# all the DAGs
dags:
  ingress:
    set_name: control_dag
    starting_node: 1
    processing_nodes:
      1: # node instance
        type_id: 1
        args:
          # TODO: make this match up with the global lookup thingy (might switch with values)
          attribute: 'state.pristine_request.headers.Host'
          # TODO: also support lookaside in this same namespace
          values: 'valid_domains'
        outlet:
          true: 2
          false: 3
      2: # node instance
        type_id: 2
        args:
          dag_prefix: dynamic_domain
          suffix_key: 'state.pristine_request.headers.Host'
      3:
        type_id: 3
        args:
          attribute: state.response.body
          value: "not found!"
        outlet:
          true: 4
      4:
        type_id: 3
        args:
          attribute: state.response.code
          value: 404
  egress:
    set_name: egress_dag
    starting_node: 1
    processing_nodes:
      1: # node instance
        type_id: 3
        args:
          attribute: 'state.response.headers.foo'
          value: 'bar'

  # TODO: do we even need this?
  # just a router to the correct dynamic domain
  #dynamic_domain:
  #  set_name: dyanmic_domain_dag_set
  #  starting_node: 255

  # per domain
  dynamic_domain_localhost:8888:
    set_name: dyanmic_domain_dag_set
    starting_node: 1
    processing_nodes:
      1:
        type_id: 1
        args:
          attribute: 'state.pristine_request.path'
          values: 'valid_paths'
        outlet:
          true: 2
          false: 4
      2:
        type_id: 3
        args:
          attribute: "state.response.body"
          value: "found!"
        outlet:
          true: 3
      3:
        type_id: 3
        args:
          attribute: "state.response.code"
          value: 200
      4:
        type_id: 3
        args:
          attribute: "state.request.headers.Host"
          value: "foo.com"
