# which DAG to execute for each "hook" and what global_option_data namespace to use
hook_dag_map:
  ingress:
    dag_name: ingress
    global_option_data_key: ingress

# map of namespace -> option_data
# these are attached to hooks in the `hook_dag_map` and passed to a DAG
# during execution
global_option_data:
  ingress:
    # TODO: better example.. this is a bit of a stretch
    response_codes:
      success: 200
      notfound: 404

# what types of processing_nodes -- effectively a template on top of processing_function_type
# these may augment the definition -- specifically the arg_spec, name, info, etc.
processing_node_types:
  1:
    processing_function_type: attribute_match
  2:
    processing_function_type: execute_dynamic_dag

  3:
    processing_function_type: set_attribute
    # if inlets/outlets aren't defined, we'll assume a 0 for both -- with empty meta
    # all of our inlets (with various metadata)
    inlets:
      0:
        name: '0th inlet'
        # limit which processing_node_types are allowed to connect in
        # if allowed_incoming is not defined, we'll allow all things incoming
        allowed_incoming:
          # pair of type_id, inlet
          type_inlet_pair:
            - [1, 0]  # this means type 1, any outlet
            - [3, null]  # this means type 3, outlet 1
      1:
        name: '1st inlet'
    # our outlets (with various metadata)
    outlets:
      0:
        name: '0th outlet'
      1:
        name: '1st outlet'
  4:
    name: 'set_status_code'
    info: 'set status code'
    processing_function_type: set_attribute
    # TODO: better-- don't like that the name is the same as the lower layer
    arg_spec:
      value:
        type: int
        # key for all possible options, NOT a place to get the values from
        # for the node instance-- they live in the node instance as "args".
        # this means that the value you are passed will be a key to lookup in options
        global_option_data_key: response_codes
  5:
    processing_function_type: iterate
  6:
    processing_function_type: eventual_bool

# TODO: add options for max_depth, etc. for DAG validation and execution
# all the DAGs
dags:
  ingress:
    # Define the starting_node, by (node_id, inlet_id)
    starting_node: [1, 0]
    # THIS is not layered
    processing_nodes:
      1: # node instance
        type_id: 1
        args:
          attribute: 'state.host'
          # list of the domains to match against
          values:
            - a.com
            - b.com
        # TODO: map?
        # map of return -> (outlet_id, inlet_id, node_id)
        outlets:
          true: [0, 0, 2]
          false: [0, 0, 3]
      2: # node instance
        type_id: 2
        args:
          dag_prefix: dynamic_domain
          suffix_key: 'state.host'
      3:
        type_id: 3
        args:
          attribute: state.response_body
          value: "not found!"
        outlets:
          true: [0, 0, 4]
      4:
        type_id: 5
        args:
          dag_key: eventual_bool
          iterate_limit: 4
          expected_value: true
        outlets:
          true: [0, 0, 5]
      5:
        type_id: 4
        args:
          attribute: state.response_code
          value: notfound

  eventual_bool:
    starting_node: [1, 0]
    processing_nodes:
      1:
        type_id: 6
        args:
          counter_location: 'state.ebool_count'
          starting_value: false
          eventual_value: true
          change_count: 3

  # per domain
  dynamic_domain_b.com:
    starting_node: [1, 0]
    processing_nodes:
      1:
        type_id: 3
        args:
          attribute: "state.response_body"
          value: "found!"
        outlets:
          true: [0, 0, 2]
      2:
        type_id: 3
        args:
          attribute: "state.response_code"
          value: 200
